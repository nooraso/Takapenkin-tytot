# Placeholder for filefifo class (replace with actual file reading method)
class FileFIFO:
    def __init__(self, filename):
        self.filename = filename
        self.file = open(filename, 'r')
    
    def read_next(self):
        line = self.file.readline()
        if line:
            return float(line.strip())
        else:
            return None  # End of file
    
    def close(self):
        self.file.close()

# Simple pulse detection based on thresholding
def detect_peaks(data, threshold=0.1, min_distance=10):
    peaks = []
    for i in range(1, len(data) - 1):
        if data[i-1] < data[i] > data[i+1] and data[i] > threshold:
            peaks.append(i)
    return peaks

def calculate_heart_rate(peaks, sampling_rate=250):
    heart_rates = []
    for i in range(1, len(peaks)):
        # Calculate time interval between consecutive peaks
        time_interval = (peaks[i] - peaks[i-1]) / sampling_rate  # in seconds
        
        # Skip zero time intervals (which cause division by zero)
        if time_interval > 0:
            heart_rate = 60 / time_interval  # in beats per minute
            heart_rates.append(heart_rate)
        else:
            print(f"Warning: Zero time interval between peaks at indices {peaks[i-1]} and {peaks[i]}")
    return heart_rates


def main():
    filename = "capture_250Hz_03.txt"  # Use the appropriate capture file here
    file_fifo = FileFIFO(filename)
    
    # Initialize a list to store recent samples (e.g., last 100 samples for peak detection)
    window_size = 100
    recent_data = []
    
    # Read data from file one sample at a time and process it
    data = []
    while True:
        value = file_fifo.read_next()
        if value is None:
            break
        recent_data.append(value)
        if len(recent_data) > window_size:
            recent_data.pop(0)  # Keep the window size fixed
        
        # Only start detecting peaks after the initial data window has been filled
        if len(recent_data) > 2:
            peaks = detect_peaks(recent_data)
            if peaks:
                data.append(peaks[-1])  # Store the most recent peak index
    
    file_fifo.close()
    
    # Calculate heart rate based on detected peaks
    heart_rates = calculate_heart_rate(data)
    
    # Output the heart rate values (at least 20 values)
    for i in range(min(20, len(heart_rates))):
        print(f"Heart rate #{i+1}: {heart_rates[i]:.2f} bpm")

if __name__ == "__main__":
    main()